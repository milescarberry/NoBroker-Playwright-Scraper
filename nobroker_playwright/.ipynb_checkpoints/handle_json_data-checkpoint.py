{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6565ec8b-f555-409e-9529-376f18b018cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import pickle\n",
    "\n",
    "import json\n",
    "\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "load_dotenv(\"./.env\")\n",
    "\n",
    "from os import getenv, listdir\n",
    "\n",
    "from mongo import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6622dd94-b7b6-40a6-8300-4a67bb77d1bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"./data/json_data/mumbai_metro_all_stations_rental_data.pkl\", 'rb') as file:\n",
    "\n",
    "    dict_ = pickle.load(file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "df6988f4-7b3b-4404-bf2c-5d84dae7b19f",
   "metadata": {},
   "outputs": [],
   "source": [
    "stations = dict_['all_mumbai_metro_stations']\n",
    "\n",
    "with open(\"./data/all_stations.txt\", 'r') as text_file:\n",
    "\n",
    "    station_names = text_file.read().split(\"\\n\")\n",
    "\n",
    "station_names_og = [station_name for station_name in station_names if station_name != '']\n",
    "    \n",
    "station_names = [i['station'] for i in dict_['all_mumbai_metro_stations']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9b02d796-3706-4409-b3ff-660e93850b6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Two keys of interest inside listPage key: ['listPageProperties', 'listPageNearByProperties']\n",
    "\n",
    "content_keys = ['listPageProperties', 'listPageNearByProperties']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "44b3bb19-17fb-4932-bad3-e29fdbd83cf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Property Attributes Shortlist\n",
    "\n",
    "prop_attr_shortlist = [\n",
    "\n",
    "    'title',\n",
    "\n",
    "    'society',\n",
    "\n",
    "    'address',\n",
    "\n",
    "    'street',\n",
    "\n",
    "    'locality',\n",
    "\n",
    "    'location',\n",
    "\n",
    "    'formattedPrice',\n",
    "\n",
    "    'negotiable'\n",
    "\n",
    "    'deposit',\n",
    "\n",
    "    'ownerName',\n",
    "\n",
    "    'furnishing',\n",
    "\n",
    "    'activationDate',\n",
    "\n",
    "    'creationDate',\n",
    "\n",
    "    'lift',\n",
    "\n",
    "    'floor',\n",
    "\n",
    "    'total_floor',\n",
    "\n",
    "    'propertySize',\n",
    "\n",
    "    'typeDesc',\n",
    "\n",
    "    'propertyAge',\n",
    "\n",
    "    'facingDesc',\n",
    "\n",
    "    'filterPreferenceScore',\n",
    "\n",
    "    'aea__',\n",
    "\n",
    "\n",
    "    'propertyScore',\n",
    "    \n",
    "\n",
    "    'transit',\n",
    "\n",
    "\n",
    "    'lifestyle',\n",
    "\n",
    "\n",
    "    'waterSupply',\n",
    "\n",
    "\n",
    "    'swimmingPool',\n",
    "\n",
    "\n",
    "    'amenitiesMap',\n",
    "\n",
    "\n",
    "    'parking',\n",
    "\n",
    "\n",
    "    'parkingDesc',\n",
    "\n",
    "\n",
    "    'sharedAccomodation',\n",
    "\n",
    "\n",
    "    'shortUrl'\n",
    "\n",
    "\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e39b1fcc-0ffe-4c66-b06d-4c8aa5420eb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_props(list_page):\n",
    "    \n",
    "\n",
    "    prop_list_1 = list_page[content_keys[0]]\n",
    "\n",
    "    prop_list_2 = list_page[content_keys[1]]\n",
    "\n",
    "    properties_list = []\n",
    "\n",
    "\n",
    "    def g_props(list_):\n",
    "\n",
    "\n",
    "        for prop in list_:\n",
    "\n",
    "            attr_dict = {key:prop[key] for key in list(prop.keys()) if key in prop_attr_shortlist}\n",
    "\n",
    "            properties_list.append(attr_dict)\n",
    "        \n",
    "\n",
    "\n",
    "    g_props(prop_list_1)\n",
    "\n",
    "\n",
    "    g_props(prop_list_2)\n",
    "\n",
    "\n",
    "    return properties_list\n",
    "        \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a002545d-fde0-4435-8ae1-3b01b50f5de6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Properties insertion for Versova was successful.\n",
      "\n",
      "\n",
      "Properties insertion for D.N. Nagar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Azad Nagar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Andheri was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Western Express Highway was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Chakala (J.B.Nagar) was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Airport Road was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Marol Naka was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Saki Naka was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Asalpha was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Jagruti Nagar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Ghatkopar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Dahisar East was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Anand Nagar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Kandarpada was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Mandapeshwar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Eksar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Borivali West was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Shimpoli was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Kandivali West was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Dahanukarwadi was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Valnaiâ€“Meeth Chowky was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Malad West was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Lower Malad was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Bangur Nagar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Goregaon West was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Oshiwara was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Lower Oshiwara was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Andheri West was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Ovaripada was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Devipada was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Mumbai Domestic Airport Metro Station was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Mograpada was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Aarey was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Goregaon East was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Kurar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Magathane was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Jogeshwari East was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Akurli was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Airports Authority Colony was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Rashtriya Udyan was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Dindoshi was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Gundavali, Andheri East was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Poisar was successful.\n",
      "\n",
      "\n",
      "Properties insertion for Dahisar East was successful.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "stations_props_dict = {}\n",
    "\n",
    "not_present_list = [name for name in station_names_og if name not in station_names]\n",
    "\n",
    "\n",
    "for station in stations:\n",
    "\n",
    "\n",
    "\n",
    "        try:\n",
    "    \n",
    "            script_tag = station['script_tag']\n",
    "        \n",
    "            list_page = script_tag['listPage']\n",
    "    \n",
    "            \n",
    "            try:\n",
    "                \n",
    "\n",
    "                properties_list = get_props(list_page)\n",
    "    \n",
    "                \n",
    "                stations_props_dict[station['station']] = properties_list\n",
    "    \n",
    "    \n",
    "            \n",
    "            except BaseException as e:\n",
    "    \n",
    "                print()\n",
    "    \n",
    "                print(f\"Name: {station['station']},  \", e)\n",
    "    \n",
    "                print()\n",
    "\n",
    "                not_present_list.append(station['station'])\n",
    "    \n",
    "                continue\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "        except BaseException as e:\n",
    "    \n",
    "    \n",
    "            print()\n",
    "    \n",
    "            print(f\"Name: {station['station']},  \", e)\n",
    "    \n",
    "            print()\n",
    "\n",
    "            not_present_list.append(station['station'])\n",
    "    \n",
    "            continue\n",
    "    \n",
    "    \n",
    "        else:\n",
    "    \n",
    "            print()\n",
    "    \n",
    "            print(f\"Properties insertion for {station['station']} was successful.\")\n",
    "    \n",
    "            print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c39e0f7f-adad-4dc6-83f4-b1311f99a1aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Not Present List: []\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print()\n",
    "\n",
    "print(f\"Not Present List: {not_present_list}\")\n",
    "\n",
    "print()\n",
    "\n",
    "\n",
    "if len(not_present_list) > 0:\n",
    "\n",
    "    for name in not_present_list:\n",
    "        \n",
    "        stations_props_dict[name] = []\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5d862c00-6989-41ed-a936-f2e72a51d461",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# list(stations[5]['script_tag']['listPage']['listPageNearByProperties'][7].keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2fa38b48-3e1c-4d48-8529-816a3ace1633",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Insert Dictionary List into MongoDB Database:\n",
    "\n",
    "\n",
    "def insert(data, dbname = getenv('dbname'), collname = getenv('collname')):\n",
    "\n",
    "    \n",
    "    try:\n",
    "        \n",
    "        open_connection()            # Ping Upon Successful Connection.\n",
    "\n",
    "\n",
    "\n",
    "    except BaseException as e:\n",
    "\n",
    "        \n",
    "        print('''\\nEncountered an Exception During Insert Operation.\\n''')\n",
    "\n",
    "        \n",
    "        print(f'''\\n{e}\\n''')\n",
    "\n",
    "\n",
    "    else:\n",
    "\n",
    "         client = open_connection()            # Get MongoDB Client\n",
    "    \n",
    "    \n",
    "         db = client[dbname]\n",
    "        \n",
    "            \n",
    "         coll = db[collname]\n",
    "            \n",
    "        \n",
    "         if len(data) > 1:\n",
    "\n",
    "             print('''\\nInserting Multiple Documents\\n''')\n",
    "        \n",
    "             coll.insert_many([data])\n",
    "\n",
    "             print('''\\nSuccessfully Inserted Multiple Documents.\\n''')\n",
    "        \n",
    "         elif len(data) == 1:\n",
    "\n",
    "             print('''\\nInserting Single Document\\n''')\n",
    "        \n",
    "             coll.insert_one([data])\n",
    "\n",
    "             print('''\\nSuccessfully Inserted Multiple Documents.\\n''')\n",
    "            \n",
    "         else:\n",
    "        \n",
    "             print('''\\nNo Data To Insert.\\n''')\n",
    "    \n",
    "            \n",
    "    \n",
    "            \n",
    "        \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "adede10e-3d44-4834-afb5-d16d0e3d193f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Call 'insert' Function:\n",
    "\n",
    "# insert(stations_props_dict, getenv('dbname'), getenv('collname'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16e66340-639d-4640-b71b-7dba5277cdc2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
